// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/weather/getTemperatures.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	usecase "github.com/kameikay/get-weather/internal/usecase/weather"
)

// MockGetTemperaturesUseCaseInterface is a mock of GetTemperaturesUseCaseInterface interface.
type MockGetTemperaturesUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGetTemperaturesUseCaseInterfaceMockRecorder
}

// MockGetTemperaturesUseCaseInterfaceMockRecorder is the mock recorder for MockGetTemperaturesUseCaseInterface.
type MockGetTemperaturesUseCaseInterfaceMockRecorder struct {
	mock *MockGetTemperaturesUseCaseInterface
}

// NewMockGetTemperaturesUseCaseInterface creates a new mock instance.
func NewMockGetTemperaturesUseCaseInterface(ctrl *gomock.Controller) *MockGetTemperaturesUseCaseInterface {
	mock := &MockGetTemperaturesUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockGetTemperaturesUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetTemperaturesUseCaseInterface) EXPECT() *MockGetTemperaturesUseCaseInterfaceMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetTemperaturesUseCaseInterface) Execute(ctx context.Context, cep string) (usecase.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, cep)
	ret0, _ := ret[0].(usecase.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetTemperaturesUseCaseInterfaceMockRecorder) Execute(ctx, cep interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetTemperaturesUseCaseInterface)(nil).Execute), ctx, cep)
}
